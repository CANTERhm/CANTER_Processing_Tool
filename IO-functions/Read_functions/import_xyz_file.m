function [x_data,y_data,z_data,varargout] = import_xyz_file(filepath, startRow, endRow)
%IMPORT_XYZ_FILE: Import numeric data from a .xyz file as column vectors.
% 
%   [X_DATA,Y_DATA,Z_DATA] = import_xyz_file(filepath,startRow,endRow) Reads data from
%   from xyz-files. Such files can be created by Gwiddion from *.jpk files.
%
%   [X_DATA,Y_DATA,Z_DATA] = IMPORT_XYZ_FILE(FILENAME, STARTROW, ENDROW) Reads
%   data from rows STARTROW through ENDROW of text file FILENAME.
% 
%   [...,map_name] = IMPROT_XYZ_FILE(...)
%   As an optional output you can get the name of the loaded map in a
%   string variable after the x-, y- and z-data.
%
% Example:
%   [x_data,y_data,z_data] = importfile('RrgBFl_C-cys_ColI_silane_1Hz_hDeflection_trace.xyz',4, 262147);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2018/08/02 15:22:51

%% Initialize variables.
if nargin < 1
   [file,path] = uigetfile('*.xyz');
   filename = fullfile(path,file);
else
    filename = filepath;
end

delimiter = '\t';
if nargin<=2
    startRow = 4;
    endRow = inf;
end

if filename ~= 0

%% Format for each line of text:
%   column1: double (%f)
%	column2: double (%f)
%   column3: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%f%f%f%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines', startRow(1)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines', startRow(block)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% asking user if trace or retrace scan
answer = questdlg('Is the loaded lateral channel trace or retrace?','Trace or Retrace?',...
    'Trace','Retrace','Trace');


%% Allocate imported array to column variable names
x_data = dataArray{:, 1};
y_data = dataArray{:, 2}.*(-1);
z_data = dataArray{:, 3};

% inverte z_data if retrace channel
if strcmp(answer,'Retrace')
    z_data = z_data.*(-1);
end

% find minimas of lateral dimensions
x_min = min(x_data);
y_min = min(y_data);

% eliminate lateral offset
x_data = x_data - x_min;
y_data = y_data - y_min;

%% output of map name
[~,name,~] = fileparts(filename);
varargout{1} = name;

else
    x_data = 'canceld';
    y_data = 'canceld';
    z_data = 'canceld';
    varargout{1} = 'canceld';

end % end if


